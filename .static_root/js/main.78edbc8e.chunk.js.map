{"version":3,"sources":["logo.svg","components/ImgMediaCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","useStyles","makeStyles","card","maxWidth","ImgMediaCard","classes","react_default","a","createElement","Card","className","CardActionArea","CardMedia","component","alt","height","image","title","CardContent","Typography","gutterBottom","variant","color","CardActions","Button","size","App","state","posts","options","chart","id","xaxis","categories","_this","time","series","name","data","fetch","res","json","this","temperature","humidity","newSeries","map","i","_this2","push","console","log","setState","_context","t0","Fragment","components_ImgMediaCard","react_apexcharts_min_default","type","width","item","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+SCUlCC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,OAuCCC,MAnCf,WACE,IAAMC,EAAUL,IAEhB,OACEM,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAWL,EAAQH,MACvBI,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACEC,UAAU,MACVC,IAAI,wBACJC,OAAO,MACPC,MAAM,uBACNC,MAAM,0BAERX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKR,UAAU,MAAhD,UAGAP,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAYE,QAAQ,QAAQC,MAAM,gBAAgBT,UAAU,KAA5D,mIAMJP,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACEjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAQC,KAAK,QAAQH,MAAM,WAA3B,SAGAhB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAQC,KAAK,QAAQH,MAAM,WAA3B,iBC0FOI,6MA9HbC,MAAQ,CACFC,MAAO,GACPC,QAAS,CACLC,MAAO,CACLC,GAAI,aAENC,MAAO,CACLC,WAAYC,EAAKC,OAGvBC,OAAQ,CACJ,CACEC,KAAM,cACNC,KAAM,IAER,CACID,KAAM,WACNC,KAAM,+OASMC,MAAM,wFAAlBC,kBACcA,EAAIC,cAAlBb,SACNc,KAAKP,KAAO,GACRQ,EAAc,GAAIC,EAAW,GAC3BC,EAAY,GACD,GAEjBjB,EAAMkB,IAAI,SAAAC,GACNC,EAAKb,KAAKc,KAAKF,EAAEZ,MACjBQ,EAAYM,KAAKF,EAAEJ,aACnBC,EAASK,KAAKF,EAAEH,YAEpBM,QAAQC,IAAIT,KAAKP,MACjBe,QAAQC,IAAIR,GACZO,QAAQC,IAAIP,GAEZC,EAAUI,KAAK,CAACZ,KAAM,aAAcC,KAAMK,IAC1CE,EAAUI,KAAK,CAACZ,KAAM,WAAYC,KAAMM,IACxCM,QAAQC,IAAIT,KAAKP,MAMjBO,KAAKU,SAAS,CACVxB,QACAQ,OAAQS,sDAIZK,QAAQC,IAARE,EAAAC,iJAMJ,OACEhD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgD,SAAA,KACIjD,EAAAC,EAAAC,cAACgD,EAAD,MACAlD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACXJ,EAAAC,EAAAC,cAACiD,EAAAlD,EAAD,CACIsB,QAASa,KAAKf,MAAME,QACpBO,OAAQM,KAAKf,MAAMS,OACnBsB,KAAK,OACLC,MAAM,UAIlBrD,EAAAC,EAAAC,cAAA,WACKkC,KAAKf,MAAMC,MAAMkB,IAAI,SAAAc,GAAI,OACtBtD,EAAAC,EAAAC,cAAA,OAAKqD,IAAKD,EAAKzB,MACX7B,EAAAC,EAAAC,cAAA,kBAAUoD,EAAKzB,MACf7B,EAAAC,EAAAC,cAAA,wBAAeF,EAAAC,EAAAC,cAAA,YAAOoD,EAAKjB,cAC3BrC,EAAAC,EAAAC,cAAA,qBAAYF,EAAAC,EAAAC,cAAA,YAAOoD,EAAKhB,uBAjF9BkB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.78edbc8e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    maxWidth: 345,\r\n  },\r\n});\r\n\r\nfunction ImgMediaCard() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.card}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          component=\"img\"\r\n          alt=\"Contemplative Reptile\"\r\n          height=\"140\"\r\n          image=\"/static/images/a.PNG\"\r\n          title=\"Contemplative Reptile\"\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            Lizard\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging\r\n            across all continents except Antarctica\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>\r\n        <Button size=\"small\" color=\"primary\">\r\n          Share\r\n        </Button>\r\n        <Button size=\"small\" color=\"primary\">\r\n          Learn More\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default ImgMediaCard;","import React, {Component} from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Chart from \"react-apexcharts\";\r\nimport ImgMediaCard from \"./components/ImgMediaCard\"\r\n\r\nclass App extends Component {\r\n  state = {\r\n        posts: [],\r\n        options: {\r\n            chart: {\r\n              id: \"basic-bar\"\r\n            },\r\n            xaxis: {\r\n              categories: this.time\r\n            }\r\n        },\r\n        series: [\r\n            {\r\n              name: \"temperature\",\r\n              data: []\r\n            },\r\n            {\r\n                name: \"humidity\",\r\n                data: []\r\n              }\r\n        ]\r\n  };\r\n\r\n  async componentDidMount() {\r\n      try {\r\n        //   let time, temperature, humidity;\r\n        \r\n          const res = await fetch('http://ec2-52-79-237-25.ap-northeast-2.compute.amazonaws.com:8080/api/');\r\n          const posts = await res.json();\r\n          this.time = [];\r\n          let temperature = [], humidity = [];\r\n          const newSeries = [];\r\n          let newOptions = {};\r\n\r\n          posts.map(i => {\r\n              this.time.push(i.time);\r\n              temperature.push(i.temperature);\r\n              humidity.push(i.humidity);   \r\n          });\r\n          console.log(this.time)\r\n          console.log(temperature);\r\n          console.log(humidity);\r\n\r\n          newSeries.push({name: 'temerature', data: temperature});\r\n          newSeries.push({name: 'humidity', data: humidity});\r\n          console.log(this.time);\r\n        //   newOptions = this.state.options;\r\n        //   newOptions.xaxis.categories = this.time;\r\n        //   console.log(newOptions)\r\n        //   console.log(newOptions.xaxis.categories);\r\n\r\n          this.setState({\r\n              posts,\r\n              series: newSeries,\r\n            //   options: newOptions\r\n          });\r\n      } catch (e) {\r\n          console.log(e);\r\n      }\r\n  }\r\n\r\n\r\n  render() {\r\n      return (\r\n        <>  \r\n            <ImgMediaCard/>\r\n            <div className=\"row\">\r\n                <div className=\"mixed-chart\">\r\n                    <Chart\r\n                        options={this.state.options}\r\n                        series={this.state.series}\r\n                        type=\"line\"\r\n                        width=\"500\"\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div>\r\n                {this.state.posts.map(item => (\r\n                    <div key={item.time}>\r\n                        <h1>Time {item.time}</h1>\r\n                        <p>Temperature <span>{item.temperature}</span></p>\r\n                        <p>Humidity <span>{item.humidity}</span></p>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </>\r\n      );\r\n  }\r\n}\r\n\r\n/* <div>\r\n                  <Table>\r\n                      <TableHead>\r\n                          <TableRow>\r\n                              <TableCell>번호</TableCell>\r\n                              <TableCell>데이터</TableCell>\r\n                          </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                          {this.state.posts.map(item => (<Customer key={item.id} number={item.number} data={item.data}/>))}\r\n                      </TableBody>\r\n                  </Table>\r\n              </div> */\r\n\r\n// function App() {\r\n//   return (\r\n//     <>\r\n//       <div className=\"App\">\r\n//         <header className=\"App-header\">\r\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n//           <p>\r\n//             Edit <code>src/App.js</code> and save to reload.\r\n//           </p>\r\n//           <a\r\n//             className=\"App-link\"\r\n//             href=\"https://reactjs.org\"\r\n//             target=\"_blank\"\r\n//             rel=\"noopener noreferrer\"\r\n//           >\r\n//             Learn React\r\n//           </a>\r\n//         </header>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}